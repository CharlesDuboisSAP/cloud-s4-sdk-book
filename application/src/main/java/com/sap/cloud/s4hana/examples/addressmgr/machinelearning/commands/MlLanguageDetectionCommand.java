package com.sap.cloud.s4hana.examples.addressmgr.machinelearning.commands;


import com.google.gson.Gson;
import com.netflix.hystrix.HystrixCommandGroupKey;
import org.slf4j.Logger;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;

import com.sap.cloud.s4hana.examples.addressmgr.machinelearning.MlLanguageDetectionResult;
import com.sap.cloud.s4hana.examples.addressmgr.machinelearning.MlService;
import com.sap.cloud.sdk.cloudplatform.logging.CloudLoggerFactory;
import com.sap.cloud.sdk.frameworks.hystrix.Command;

public class MlLanguageDetectionCommand extends Command<MlLanguageDetectionResult> {
    private static final Logger logger = CloudLoggerFactory.getLogger(MlLanguageDetectionCommand.class);

    private final MlService mlService;
    private final String input;

    public MlLanguageDetectionCommand(final MlService mlService, String input) {
        super(HystrixCommandGroupKey.Factory.asKey("LeonardoMlFoundation-langdetect"), 10000);
        this.mlService = mlService;
        this.input = input;
    }

    @Override
    protected MlLanguageDetectionResult run() throws Exception {
        // this method shows how to refactor the code generated by api.sap.com:

        DataOutputStream dataOut = null;
        BufferedReader in = null;

        try {
            //API endpoint for API sandbox
            String url = mlService.getLeonardoMlSandboxUrlOrThrow() + "/languagedetection/language";

            URL urlObj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
            //setting request method
            connection.setRequestMethod("POST");

            //adding headers
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("Accept", "application/json;charset=UTF-8");
            //API Key for API Sandbox
            connection.setRequestProperty("APIKey", mlService.getMlApiKeyOrThrow());
            connection.setDoInput(true);

            //sending POST request
            connection.setDoOutput(true);
            dataOut = new DataOutputStream(connection.getOutputStream());
            dataOut.writeBytes(new Gson().toJson(Collections.singletonMap("message", input)));
            dataOut.flush();

            int responseCode = connection.getResponseCode();
            in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            // parsing response with custom-built POJO
            final MlLanguageDetectionResult mlLanguageDetectionResult =
                    new Gson().fromJson(response.toString(), MlLanguageDetectionResult.class);

            return mlLanguageDetectionResult;

        } finally {
            try {
                if (dataOut != null) {
                    dataOut.close();
                }
                if (in != null) {
                    in.close();
                }

            } catch (IOException e) {
                //do something with exception
                logger.error("Problem while closing stream", e);
            }
        }

    }

    @Override
    protected MlLanguageDetectionResult getFallback() {
        logger.warn("Fallback called because of exception", getExecutionException());
        final MlLanguageDetectionResult enResult = new MlLanguageDetectionResult();
        enResult.setConfidence(0.);
        enResult.setLangStr("de");
        return enResult;
    }
}
